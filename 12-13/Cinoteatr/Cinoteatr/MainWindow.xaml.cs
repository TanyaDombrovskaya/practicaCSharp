using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Xml.Linq;

namespace Cinoteatr
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public string selectedFilm = "";

        public class RelayCommand : ICommand
        {
            private readonly Action<object> _execute;
            private readonly Predicate<object> _canExecute;
           

            public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
            {
                _execute = execute;
                _canExecute = canExecute;
            }

            public bool CanExecute(object parameter) => _canExecute?.Invoke(parameter) ?? true;

            public void Execute(object parameter) => _execute(parameter);

            public event EventHandler CanExecuteChanged
            {
                add { CommandManager.RequerySuggested += value; }
                remove { CommandManager.RequerySuggested -= value; }
            }
        }

        public ICommand AddCommand { get; }
        public ICommand EditCommand { get; }
        public ICommand DeleteCommand { get; }

        public MainWindow()
        {
            InitializeComponent();

            mesta.VerticalAlignment = VerticalAlignment.Stretch;
            mesta.HorizontalAlignment = HorizontalAlignment.Stretch;
            mesta.RowHeight = Double.NaN;
            mesta.AutoGenerateColumns = true;
            mesta.AutoGeneratedColumns += Mesta_AutoGeneratedColumns;

            var data = new List<List<string>>();
            int counter = 1;
            for (int i = 0; i < 10; i++)
            {
                var row = new List<string>();
                for (int j = 0; j < 5; j++)
                {
                    row.Add(counter.ToString());
                    counter++;
                }
                data.Add(row);
            }

            mesta.ItemsSource = ConvertToDataTable(data).DefaultView;
            ResizeRowsToStretch();

            AddCommand = new RelayCommand(ExecuteAddCommand);
            EditCommand = new RelayCommand(ExecuteEditCommand);
            DeleteCommand = new RelayCommand(ExecuteDeleteCommand);

            this.DataContext = this;
        }

        private void ExecuteAddCommand(object parameter)
        {
            bronButton_Click(parameter, null);
        }

        private void ExecuteEditCommand(object parameter)
        {
            changeButton_Click(parameter, null);
        }
        private void ExecuteDeleteCommand(object parameter)
        {
            clearButton_Click(parameter, null);
        }

        private void Mesta_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            var selectedCells = mesta.SelectedCells;

            int selectedCount = selectedCells.Count;

            List<string> mestaList = new List<string>();

            foreach (var cell in selectedCells)
            {
                var rowView = cell.Item as System.Data.DataRowView;
                if (rowView != null)
                {
                    var columnIndex = cell.Column.DisplayIndex;

                    var cellValue = rowView.Row.ItemArray[columnIndex]?.ToString().Trim();

                    if (!string.IsNullOrEmpty(cellValue))
                    {
                        mestaList.Add(cellValue);
                    }
                }
            }

            mestoLabel.Content = $"{string.Join(", ", mestaList)}";

            ChangePrice(selectedCount);
        }

        public void ChangePrice(int count)
        {
            priceLabel.Content = Convert.ToString(15 * count);
        }

        private void Mesta_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column in mesta.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        private DataTable ConvertToDataTable(List<List<string>> data)
        {
            var table = new DataTable();

            for (int i = 0; i < 5; i++) 
            {
                table.Columns.Add($"Column{i}");
            }

            foreach (var row in data)
            {
                table.Rows.Add(row.ToArray());
            }

            return table;
        }

        private void ResizeRowsToStretch()
        {
            mesta.Loaded += (s, e) =>
            {
                if (mesta.Items.Count > 0)
                {
                    double availableHeight = mesta.ActualHeight;
                    double rowHeight = availableHeight / mesta.Items.Count;

                    foreach (var row in mesta.Items)
                    {
                        var dataGridRow = (DataGridRow)mesta.ItemContainerGenerator.ContainerFromItem(row);
                        if (dataGridRow != null)
                        {
                            dataGridRow.Height = rowHeight;
                        }
                    }
                }
            };
        }

        private void clearButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Бронь мест отменена.");
        }

        private void changeButton_Click(object sender, RoutedEventArgs e)
        {
            Change change = new Change();
            change.Show();
        }

        private void bronButton_Click(object sender, RoutedEventArgs e)
        {
            if (mestoLabel.Content != "" && priceLabel.Content != "" && selectedFilm != "")
            {
                MessageBox.Show($"Вы забронировали:" +
                $"\nМесто: {mestoLabel.Content}" +
                $"\nСтоимость: {priceLabel.Content}" +
                $"\nФильм: {selectedFilm}");
            }
            else
            {
                MessageBox.Show("Заполните все поля!");
            }
        }   

        private void Film_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem selectedMenuItem)
            {
                var parentMenuItem = selectedMenuItem.Parent as MenuItem;

                if (parentMenuItem != null)
                {
                    foreach (var item in parentMenuItem.Items)
                    {
                        if (item is MenuItem menuItem && menuItem != selectedMenuItem)
                        {
                            menuItem.IsChecked = false;
                        }
                    }
                }

                selectedMenuItem.IsChecked = true;

                selectedFilm = selectedMenuItem.Header.ToString();
            }
        }
    }
}
