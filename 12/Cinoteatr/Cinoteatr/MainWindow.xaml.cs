using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace Cinoteatr
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeComboBox();

            mesta.VerticalAlignment = VerticalAlignment.Stretch;
            mesta.HorizontalAlignment = HorizontalAlignment.Stretch;
            mesta.RowHeight = Double.NaN;
            mesta.AutoGenerateColumns = true;
            mesta.AutoGeneratedColumns += Mesta_AutoGeneratedColumns;

            var data = new List<List<string>>();
            int counter = 1;
            for (int i = 0; i < 10; i++)
            {
                var row = new List<string>();
                for (int j = 0; j < 5; j++)
                {
                    row.Add(counter.ToString());
                    counter++;
                }
                data.Add(row);
            }

            mesta.ItemsSource = ConvertToDataTable(data).DefaultView;

            ResizeRowsToStretch();
        }

        private void InitializeComboBox()
        {
            filmBox.Items.Add("SuperMan");
            filmBox.Items.Add("Ambasador");
            filmBox.Items.Add("FilmFilm");
        }

        private void Mesta_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (mesta.CurrentCell.Item is System.Data.DataRowView rowView)
            {
                var columnIndex = mesta.CurrentCell.Column.DisplayIndex;
                var cellValue = rowView.Row.ItemArray[columnIndex]?.ToString();

                mestoLabel.Content = cellValue;

                ChangePrice();
            }
        }

        public void ChangePrice()
        {
            priceLabel.Content = Convert.ToString(15);
        }

        private void Mesta_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column in mesta.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        private DataTable ConvertToDataTable(List<List<string>> data)
        {
            var table = new DataTable();

            for (int i = 0; i < 5; i++) 
            {
                table.Columns.Add($"Column{i}");
            }

            foreach (var row in data)
            {
                table.Rows.Add(row.ToArray());
            }

            return table;
        }

        private void ResizeRowsToStretch()
        {
            mesta.Loaded += (s, e) =>
            {
                if (mesta.Items.Count > 0)
                {
                    double availableHeight = mesta.ActualHeight;
                    double rowHeight = availableHeight / mesta.Items.Count;

                    foreach (var row in mesta.Items)
                    {
                        var dataGridRow = (DataGridRow)mesta.ItemContainerGenerator.ContainerFromItem(row);
                        if (dataGridRow != null)
                        {
                            dataGridRow.Height = rowHeight;
                        }
                    }
                }
            };
        }

        private void clearButton_Click(object sender, RoutedEventArgs e)
        {
            mestoLabel.Content = "";
            priceLabel.Content = "0";
            filmBox.SelectedIndex = -1;
        }

        private void bronButton_Click(object sender, RoutedEventArgs e)
        {
            if (mestoLabel.Content != "" && priceLabel.Content != "" && filmBox.SelectedItem != "")
            {
                MessageBox.Show($"Вы забронировали:" +
                $"\nМесто: {mestoLabel.Content}" +
                $"\nФильм: {filmBox.SelectedItem}" +
                $"\nСтоимость: {priceLabel.Content}");
            }
            else
            {
                MessageBox.Show("Заполните все поля!");
            }
        }
    }
}
