using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace Cinoteatr
{
    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        public string SelectedTime { get; set; } = "";
        public string SelectedFilm{ get; set; } = "";
        private int _ticketCount;

        public event PropertyChangedEventHandler PropertyChanged;

        public ObservableCollection<MovieSession> MovieSessions { get; set; }

        public int TicketCount
        {
            get => _ticketCount;
            set
            {
                _ticketCount = value;
                OnPropertyChanged(nameof(TicketCount));
            }
        }

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public ICommand AddCommand { get; }
        public ICommand EditCommand { get; }
        public ICommand DeleteCommand { get; }

        public MainWindow()
        {
            InitializeComponent();

            mesta.VerticalAlignment = VerticalAlignment.Stretch;
            mesta.HorizontalAlignment = HorizontalAlignment.Stretch;
            mesta.RowHeight = Double.NaN;
            mesta.AutoGenerateColumns = true;
            mesta.AutoGeneratedColumns += Mesta_AutoGeneratedColumns;
            mesta.CanUserAddRows = false;

            var data = GenerateGridData();
            mesta.ItemsSource = ConvertToDataTable(data).DefaultView;
            ResizeRowsToStretch();


            MovieSessions = new ObservableCollection<MovieSession>();
            LoadMovieSessions();

            DataContext = new CinemaViewModel();
        }

        private void ExecuteEditCommand(object parameter) => changeButton_Click(parameter, null);
        private void ExecuteDeleteCommand(object parameter) => clearButton_Click(parameter, null);

        private void Mesta_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            var selectedCells = mesta.SelectedCells;
            int selectedCount = selectedCells.Count;

            var mestaList = new List<string>();
            foreach (var cell in selectedCells)
            {
                if (cell.Item is DataRowView rowView)
                {
                    var columnIndex = cell.Column.DisplayIndex;
                    var cellValue = rowView.Row.ItemArray[columnIndex]?.ToString()?.Trim();
                    if (!string.IsNullOrEmpty(cellValue))
                    {
                        mestaList.Add(cellValue);
                    }
                }
            }
            mestoLabel.Content = string.Join(", ", mestaList);
        }

        private void LoadMovieSessions()
        {
            MovieSessions.Add(new MovieSession("SuperMan", new DateTime(2025, 4, 9, 17, 0, 0)));
            MovieSessions.Add(new MovieSession("Ambasador", new DateTime(2025, 4, 9, 15, 0, 0)));
            MovieSessions.Add(new MovieSession("FilmFilm", new DateTime(2025, 4, 9, 21, 0, 0)));
        }

        public List<MovieSession> FilterMovieSessions(DateTime startTime, DateTime endTime)
        {
            return MovieSessions
                .Where(session => session.SessionTime >= startTime && session.SessionTime <= endTime)
                .ToList();
        }

        private void Mesta_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column in mesta.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        private List<List<string>> GenerateGridData()
        {
            var data = new List<List<string>>();
            int counter = 1;
            for (int i = 0; i < 10; i++)
            {
                var row = new List<string>();
                for (int j = 0; j < 5; j++)
                {
                    row.Add(counter.ToString());
                    counter++;
                }
                data.Add(row);
            }
            return data;
        }

        private DataTable ConvertToDataTable(List<List<string>> data)
        {
            var table = new DataTable();
            for (int i = 0; i < 5; i++)
            {
                table.Columns.Add($"Column{i}");
            }
            foreach (var row in data)
            {
                table.Rows.Add(row.ToArray());
            }
            return table;
        }

        private void ResizeRowsToStretch()
        {
            mesta.Loaded += (s, e) =>
            {
                if (mesta.Items.Count > 0)
                {
                    double availableHeight = mesta.ActualHeight;
                    double rowHeight = availableHeight / mesta.Items.Count;

                    foreach (var row in mesta.Items)
                    {
                        var dataGridRow = (DataGridRow)mesta.ItemContainerGenerator.ContainerFromItem(row);
                        if (dataGridRow != null)
                        {
                            dataGridRow.Height = rowHeight;
                        }
                    }
                }
            };
        }

        private void clearButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Бронь мест отменена.");
        }

        private void changeButton_Click(object sender, RoutedEventArgs e)
        {
            Change change = new Change();
            change.Show();
        }
    }
}
